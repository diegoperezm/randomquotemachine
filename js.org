#+PROPERTY: header-args :results verbatim :dir ./src/js/ :cache yes

* JS 
#+NAME:variable
#+BEGIN_SRC js
var variable = {
 divText: document.getElementById("text"),
 paragraph : document.getElementById("paragraph"),
 buttonGetQuote: document.getElementById("buttonGetQuote"),
 quotes: [
  "Carly Rae Jepsen (Curiosity)",
  "I threw a wish in the well",
  "Don't ask me I'll never tell",
  "I looked at you as it fell And now you're in my way."
]
};
#+END_SRC


#+NAME:fsm
#+BEGIN_SRC js
var fsm = {
 currentState: "INITIAL",
  states: {
   INITIAL: {
     "click": "LOADING"
   },
   LOADING: {
     "sucess": "DISPLAY",
      "error": "ERROR"
   },
   DISPLAY: {
     "click":"LOADING"
   },
   ERROR: {
    "click":"LOADING"
   },
  }
}; 
#+END_SRC


#+NAME: quotegenerator
#+BEGIN_SRC js
var quoteGenerator =  {

  currentQuote : "",
  currentNumber: 0,

/**
 * @param {Object}     variable - Data and DOM elements   
 * @param {String} currentState   
 */
  start : function( variable, currentState) { 
    var buttonGetQuote = variable.buttonGetQuote;
    
    buttonGetQuote.addEventListener("click", () => {
      transition(variable, currentState, "click");});
  }
};
#+END_SRC


#+NAME:transition
#+BEGIN_SRC js
/**
 * @param {Oject}              variable - Data and DOM elements
 * @param {String}         currentState  
 * @param {String}               action - Input to change state
 * @param {Object|String}         error - String when quote is undefined
 * @description           side effects  - Modify fsm 
 */
function transition ( variable, currentState, action, error) {
 
 var state = currentState;  

  if (fsm.states[state][action]) {
   var nextState = fsm.states[state][action];
   fsm.currentState = nextState;

  switch(nextState) {
    case "LOADING":
     getQuote(variable, nextState);
    break;
    case "DISPLAY":
      displayQuote(variable); 
     break;
   case "ERROR":
      displayError(variable, nextState, action, error); 
     break;
   } 
 }
}
#+END_SRC


#+NAME:getquote
#+BEGIN_SRC js
/**
 * @param {Object}     variable - Data and DOM elements 
 * @param {String} currentState 
 */
function getQuote(variable, currentState) {

  var quotes = variable.quotes;
  var quote =  Promise.resolve(quotes); 

  quote
     .then((elements) => { 
      setQuote(variable, elements[quoteGenerator.currentNumber % 4]); 
      transition(variable, currentState, "sucess");
     })
     .catch( error => {
       transition(variable, currentState, "error", error);
    });
}
#+END_SRC

#+NAME:setquote
#+BEGIN_SRC js
/**
 * @param  {Object}       variable - Data and DOM elements  
 * @param  {String}          quote - A quote 
 * @throws {String}      Exception - When quote is undefined
 * @description       side effects - Modify  quoteGenerator
 */
function setQuote(variable, quote) {

 if( quote ===  undefined ) { 
     throw "quote is undefined";
 }

 quoteGenerator.currentQuote = quote;
 quoteGenerator.currentNumber += 1 ;
}
#+END_SRC

#+NAME:addquotetopage
#+BEGIN_SRC js
/**
 * @param {Object}     variable  -  Data and DOM elements  
 * @description     side effects -  Modify  a DOM element 
 */
function addQuoteToPage(variable) {
 var paragraph = variable.paragraph;  
 paragraph.textContent = quoteGenerator.currentQuote; 
}
#+END_SRC

#+NAME: adderrortopage
#+BEGIN_SRC js
/**
 * @param {Object}           variable - Data and DOM elements 
 * @param {Object|String}    error -  
 */
function addErrorToPage(variable, error) {
 var paragraph = variable.paragraph;  
 paragraph.textContent = error;
}
#+END_SRC

#+NAME:displayquote
#+BEGIN_SRC js
/**
 * @param {Object} variable - Data and DOM elements 
 */
function displayQuote(variable) {
    addQuoteToPage(variable);
}
#+END_SRC

#+NAME:displayerror
#+BEGIN_SRC js
/**
 * @param {Object}          variable - Data and DOM elements 
 * @param {String}      currentState 
 * @param {String}          action   - The input to change state 
 * @param {Object|String}    error   -  
 */
function displayError(variable, currentState, action, error) {
    console.error("  state: ", currentState, "\n",
                  "action: ", action, "\n", 
                  " Error: ", error); 

    addErrorToPage(variable, error);
}
#+END_SRC


#+NAME: main

#+BEGIN_SRC js :noweb yes :mkdirp yes  :tangle ./src/js/index.js :cache yes

<<variable>>

/*
| state   | input   | next state |
|---------+---------+------------|
| INITIAL | click   | LOADING    |
|         |         |            |
| LOADING | sucess  | DISPLAY    |
|         | error   | ERROR      |
|         |         |            |
| DISPLAY | click   | LOADING    |
|         |         |            |
| ERROR   | click   | LOADING    |
*/

<<fsm>>

<<quotegenerator>>

<<transition>>

<<getquote>>

<<setquote>>

<<addquotetopage>>

<<displayerror>>

<<displayquote>>

<<adderrortopage>>

quoteGenerator.start(variable, fsm.currentState);
#+END_SRC


* check

#+NAME: check
#+BEGIN_SRC sh 
jshint index.js;
echo '';
#+END_SRC


* prettier

#+NAME: prettier
#+BEGIN_SRC  sh :exports none   :dir ./src/js/
npm run prettier;
#+END_SRC







